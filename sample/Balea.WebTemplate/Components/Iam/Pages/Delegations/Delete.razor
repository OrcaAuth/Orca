@page "/Iam/Delegations/{id}/Delete"

@using Microsoft.AspNetCore.Identity

@inject IDelegationStore DelegationStore
@inject IUserStore UserStore

@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Delegation</h4>
    <hr />
    @if (delegation is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Who</dt>
            <dd class="col-sm-10">@delegation.Who</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Whom</dt>
            <dd class="col-sm-10">@delegation.Whom</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">From</dt>
            <dd class="col-sm-10">@(delegation.From.ToShortDateString())</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">To</dt>
            <dd class="col-sm-10">@(delegation.To.ToShortDateString())</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Enabled</dt>
            <dd class="col-sm-10 form-check form-switch">
                <InputCheckbox @bind-Value="delegation.Enabled" class="form-check-input" role="switch" disabled />
            </dd>
        </dl>
        <EditForm method="post" Model="delegation" OnValidSubmit="DeleteDelegation" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(delegation is null)">Delete</button>
            <div class="vr"></div>
            <a href="/Iam/Delegations">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Delegation? delegation;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        delegation = await DelegationStore.FindByIdAsync(Id);

        if (delegation is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            var who = await UserStore.FindBySubjectAsync(delegation.Who);
            var whom = await UserStore.FindBySubjectAsync(delegation.Whom);

            delegation.Who = who.Username;
            delegation.Whom = whom.Username;
        }
    }

    public async Task DeleteDelegation()
    {
        var result = await DelegationStore.DeleteAsync(delegation);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/Iam/Delegations");
        }
    }
}
