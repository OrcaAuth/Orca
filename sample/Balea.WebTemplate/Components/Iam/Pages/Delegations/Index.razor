@page "/Iam/Delegations"

@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Identity

@inject IDelegationStore DelegationStore
@inject IUserStore UserStore

<PageTitle>Delegations</PageTitle>

<h1>Delegations</h1>

<a href="/Iam/Delegations/Create" class="btn btn-primary">
    <i class="fa fa-solid fa-plus"></i> Create New
</a>

@if (delegations is null)
{
    <p><em>Loading...</em></p>
}
else
{
<QuickGrid Class="table" Items="@delegations" Pagination="@pagination">
    <PropertyColumn Property="delegation => delegation.Who" Title="Who" />
    <PropertyColumn Property="delegation => delegation.Whom" Title="Whom" />
    <PropertyColumn Property="delegation => delegation.From" Title="From" Format="d" />
    <PropertyColumn Property="delegation => delegation.To" Title="To" Format="d" />
    <TemplateColumn Context="delegation" Title="Enabled">
        @if (delegation.Enabled)
        {
            <i class="fa-regular fa-square-check"></i>
        }
        else
        {
            <i class="fa-regular fa-square"></i>
        }
    </TemplateColumn>

    <TemplateColumn Context="delegation" Title="Actions">
        <div class="actions">
            <a href="@($"/Iam/Delegations/{delegation.Id}")" title="Details">
                <i class="fa fa-solid fa-eye"></i>
            </a>
            <a href="@($"/Iam/Delegations/{delegation.Id}/Edit")" title="Edit">
                <i class="fa fa-solid fa-pencil"></i>
            </a>
            <a href="@($"/Iam/Delegations/{delegation.Id}/Delete")" title="Delete">
                <i class="fa fa-solid fa-trash-can"></i>
            </a>
        </div>
    </TemplateColumn>
</QuickGrid>
<Paginator State="@pagination"></Paginator>
}

@code {
    IQueryable<Delegation>? delegations;

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    protected override async Task OnInitializedAsync()
    {
        var list = await DelegationStore.ListAsync();

        var users = await UserStore.ListAsync();
        var usernames = users.ToDictionary(user => user.SubjectId, user => user.Username);

        foreach (var item in list)
        {
            item.Who = usernames[item.Who];
            item.Whom = usernames[item.Whom];
        }

        delegations = list.AsQueryable();
    }
}
