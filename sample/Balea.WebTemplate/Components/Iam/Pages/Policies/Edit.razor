@page "/Iam/Policies/{id}/Edit"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

@inject IPolicyStore PolicyStore
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Policy</h4>
<hr />
@if (Input is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <EditForm method="post" Model="Input" OnValidSubmit="UpdatePolicy" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <input type="hidden" name="Input.ConcurrencyStamp" value="@Input.ConcurrencyStamp" />

                <div class="form-floating mb-3">
                    <InputText id="name" @bind-Value="Input.Name" class="form-control" placeholder="Please enter the name." />
                    <label for="name" class="form-label">Name</label>
                    <ValidationMessage For="() => Input.Name" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText id="description" @bind-Value="Input.Description" class="form-control" placeholder="Please enter the description." />
                    <label for="description" class="form-label">Description</label>
                    <ValidationMessage For="() => Input.Description" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputTextArea id="content" @bind-Value="Input.Content" class="form-control" placeholder="Please enter the content." />
                    <label for="content" class="form-label">Content</label>
                    <ValidationMessage For="() => Input.Content" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/Iam/Policies">Back to List</a>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    [SupplyParameterFromForm]
    private InputModel? Input { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var policy = await PolicyStore.FindByIdAsync(Id);

        if (policy is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        Input = new InputModel
        {
            Name = policy.Name,
            Description = policy.Description,
            Content = policy.Content,
            // ConcurrencyStamp = policy.ConcurrencyStamp,
        };
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdatePolicy()
    {
        var policy = await PolicyStore.FindByIdAsync(Id);

        policy.Name = Input.Name;
        policy.Description = Input.Description;
        policy.Content = Input.Content;
        // policy.ConcurrencyStamp = Input.ConcurrencyStamp;

        var result = await PolicyStore.UpdateAsync(policy);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/Iam/Policies");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Name")]
        public string? Name { get; set; }

        [Required]
        [Display(Name = "Description")]
        public string? Description { get; set; }

        [Required]
        [Display(Name = "Content")]
        public string? Content { get; set; }

        // [Required]
        [Display(Name = "Concurrency stamp")]
        public string? ConcurrencyStamp { get; set; }
    }
}
