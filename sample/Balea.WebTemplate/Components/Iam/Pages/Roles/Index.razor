@page "/Iam/Roles"

@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Identity

@inject IRoleStore RoleStore

<PageTitle>Roles</PageTitle>

<h1>Roles</h1>

<a href="/Iam/Roles/Create" class="btn btn-primary">
    <i class="fa fa-solid fa-plus"></i> Create New
</a>

@if (roles is null)
{
    <p><em>Loading...</em></p>
}
else
{
<QuickGrid Class="table" Items="@roles" Pagination="@pagination">
    <PropertyColumn Property="role => role.Name" Title="Name" />
    <PropertyColumn Property="role => role.Description" Title="Description" />
    <PropertyColumn Property="role => role.Enabled" Title="Enabled" />

    <TemplateColumn Context="role">
        <div class="actions">
            <a href="@($"/Iam/Roles/{role.Id}")">
                <i class="fa fa-solid fa-eye"></i>
            </a>
            <a href="@($"/Iam/Roles/{role.Id}/Edit")">
                <i class="fa fa-solid fa-pencil"></i>
            </a>
            <a href="@($"/Iam/Roles/{role.Id}/Delete")">
                <i class="fa fa-solid fa-trash-can"></i>
            </a>
        </div>
    </TemplateColumn>
</QuickGrid>
<Paginator State="@pagination"></Paginator>
}

@code {
    IQueryable<Role>? roles;

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    protected override async Task OnInitializedAsync()
    {
        var list = await RoleStore.ListAsync();
        roles = list.AsQueryable();
    }
}
