@page "/Iam/Users"

@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Identity

@inject IUserStore UserStore

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<a href="/Iam/Users/Create" class="btn btn-primary pe-none disabled">
    <i class="fa fa-solid fa-plus"></i> Create New
</a>

@if (users is null)
{
    <p><em>Loading...</em></p>
}
else
{
<QuickGrid Class="table" Items="@users" Pagination="@pagination">
    <PropertyColumn Property="user => user.Username" Title="Username" />

    <TemplateColumn Context="user" Title="Actions">
        <div class="actions">
            <a href="@($"/Iam/Users/{user.SubjectId}/Roles")" title="Roles">
                <i class="fa fa-solid fa-user-tie"></i>
            </a>
            <div class="vr"></div>
            <a href="@($"/Iam/Users/{user.SubjectId}")" title="Details" class="btn-link pe-none disabled">
                <i class="fa fa-solid fa-eye"></i>
            </a>
            <a href="@($"/Iam/Users/{user.SubjectId}/Edit")" title="Edit" class="btn-link pe-none disabled">
                <i class="fa fa-solid fa-pencil"></i>
            </a>
            <a href="@($"/Iam/Users/{user.SubjectId}/Delete")" title="Delete" class="btn-link pe-none disabled">
                <i class="fa fa-solid fa-trash-can"></i>
            </a>
        </div>
    </TemplateColumn>
</QuickGrid>
<Paginator State="@pagination"></Paginator>
}

@code {
    IQueryable<User>? users;

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    protected override async Task OnInitializedAsync()
    {
        var list = await UserStore.ListAsync();
        users = list.AsQueryable();
    }
}
