@page "/Iam/Roles/{id}/Delete"

@using Microsoft.AspNetCore.Identity

@inject IRoleStore RoleStore
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Role</h4>
    <hr />
    @if (role is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@role.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@role.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Enabled</dt>
            <dd class="col-sm-10 form-check form-switch">
                <InputCheckbox @bind-Value="role.Enabled" class="form-check-input" role="switch" disabled />
            </dd>
        </dl>
        @if (role.Mappings.Any())
        {
            <dl class="row">
                <dt class="col-sm-2">Mappings</dt>
                <dd class="col-sm-4">
                    <ul class="list-group list-group-flush">
                        @foreach (var item in role.Mappings)
                        {
                            <li class="list-group-item">@item</li>
                        }
                    </ul>
                </dd>
            </dl>
        }
        <EditForm method="post" Model="role" OnValidSubmit="DeleteRole" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(role is null)">Delete</button>
            <div class="vr"></div>
            <a href="/Iam/Roles">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Role? role;

    [Parameter]
    public string Id { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        role = await RoleStore.FindByIdAsync(Id);

        if (role is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteRole()
    {
        var result = await RoleStore.DeleteAsync(role);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/Iam/Roles");
        }
    }
}
