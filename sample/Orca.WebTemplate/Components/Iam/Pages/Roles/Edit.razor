@page "/Iam/Roles/{id}/Edit"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

@inject IRoleStore RoleStore
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Role</h4>
<hr />
@if (Input is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <EditForm method="post" Model="Input" OnValidSubmit="UpdateRole" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <input type="hidden" name="Input.ConcurrencyStamp" value="@Input.ConcurrencyStamp" />

                <div class="form-floating mb-3">
                    <InputText id="name" @bind-Value="Input.Name" class="form-control" placeholder="Please enter the name." />
                    <label for="name" class="form-label">Name</label>
                    <ValidationMessage For="() => Input.Name" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText id="description" @bind-Value="Input.Description" class="form-control" placeholder="Please enter the description." />
                    <label for="description" class="form-label">Description</label>
                    <ValidationMessage For="() => Input.Description" class="text-danger" />
                </div>
                <div class="form-check form-switch mb-3">
                    <InputCheckbox id="enabled" @bind-Value="Input.Enabled" class="form-check-input" role="switch" />
                    <label for="enabled" class="form-label">Enabled</label>
                    <ValidationMessage For="() => Input.Enabled" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="mappings" class="form-label">Mappings</label>
                    <DynamicList Items="@Input.Mappings" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/Iam/Roles">Back to List</a>
</div>

@code {
    [Parameter]
    public string Id { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var role = await RoleStore.FindByIdAsync(Id);

        if (role is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            Input = new InputModel
            {
                Name = role.Name,
                Description = role.Description,
                Enabled = role.Enabled,
                Mappings = role.Mappings,
                // ConcurrencyStamp = role.ConcurrencyStamp,
            };
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateRole()
    {
        var role = await RoleStore.FindByIdAsync(Id);

        role.Name = Input.Name;
        role.Description = Input.Description;
        role.Enabled = Input.Enabled;
        role.Mappings = Input.Mappings;
        // role.ConcurrencyStamp = Input.ConcurrencyStamp;

        var result = await RoleStore.UpdateAsync(role);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/Iam/Roles");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Name")]
        public string? Name { get; set; }

        [Required]
        [Display(Name = "Description")]
        public string? Description { get; set; }

        [Required]
        [Display(Name = "Enabled")]
        public bool Enabled { get; set; }

        [Display(Name = "Mappings")]
        public IList<string> Mappings { get; set; } = [];

        // [Required]
        [Display(Name = "Concurrency stamp")]
        public string? ConcurrencyStamp { get; set; }
    }
}
