@page "/Iam/Roles/{id}/Subjects/Edit"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

@inject IRoleStore RoleStore
@inject ISubjectStore SubjectStore

@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Role</h4>
<hr />
@if (role is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <dl class="row">
        <dt class="col-sm-2">Role</dt>
        <dd class="col-sm-10">@role.Name</dd>
    </dl>
    <dl class="row">
        <dt class="col-sm-2">Subjects</dt>
        <dd class="col-sm-10">
            <div class="container_">
                <DualListBox TItem="Subject"
                             LeftItems="@availableSubjects" LeftTitle="Available"
                             RightItems="@assignedSubjects" RightTitle="Assigned"
                             Name="@(item => item.Name)"
                             Value="@(item => item.Id)"
                             OnMoveToLeft="RemoveSubjectsAsync"
                             OnMoveToRight="AddSubjectsAsync">
                </DualListBox>
            </div>
        </dd>
    </dl>
}

<div>
    <a href="/Iam/Roles">Back to List</a>
</div>

@code {
    Role? role;

    IList<Subject> availableSubjects = [];
    IList<Subject> assignedSubjects = [];

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        role = await RoleStore.FindByIdAsync(Id);

        if (role is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        await LoadSubjectsAsync();
    }

    private async Task LoadSubjectsAsync()
    {
        var currentSubjects = await RoleStore.GetSubjectsAsync(role);
        var currentSubjectSet = currentSubjects.Select(x => x.Id).ToHashSet();

        var subjects = await SubjectStore.ListAsync();

        assignedSubjects.Clear();
        availableSubjects.Clear();

        foreach (var subject in subjects)
        {
            if (currentSubjectSet.Contains(subject.Id))
            {
                assignedSubjects.Add(subject);
            }
            else
            {
                availableSubjects.Add(subject);
            }
        }
    }

    private async Task AddSubjectsAsync(MoveItemsEventArgs<Subject> e)
    {
        foreach (var subject in e.Items)
        {
            await RoleStore.AddSubjectAsync(role, subject);
        }
    }

    private async Task RemoveSubjectsAsync(MoveItemsEventArgs<Subject> e)
    {
        foreach (var subject in e.Items)
        {
            await RoleStore.RemoveSubjectAsync(role, subject);
        }
    }
}
