@page "/Iam/Subjects/{id}/Edit"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

@inject ISubjectStore SubjectStore
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Subject</h4>
<hr />
@if (Input is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <EditForm method="post" Model="Input" OnValidSubmit="UpdateSubject" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <input type="hidden" name="Input.ConcurrencyStamp" value="@Input.ConcurrencyStamp" />

                <div class="form-floating mb-3">
                    <InputText id="name" @bind-Value="Input.Name" class="form-control" placeholder="Please enter the name." />
                    <label for="name" class="form-label">Name</label>
                    <ValidationMessage For="() => Input.Name" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText id="email" @bind-Value="Input.Email" class="form-control" placeholder="Please enter the email." />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/Iam/Subjects">Back to List</a>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    [SupplyParameterFromForm]
    private InputModel? Input { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var subject = await SubjectStore.FindByIdAsync(Id);

        if (subject is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        Input = new InputModel
        {
            Name = subject.Name,
            Email = subject.Email,
            // ConcurrencyStamp = subject.ConcurrencyStamp,
        };
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateSubject()
    {
        var subject = await SubjectStore.FindByIdAsync(Id);

        subject.Name = Input.Name;
        subject.Email = Input.Email;
        // subject.ConcurrencyStamp = Input.ConcurrencyStamp;

        var result = await SubjectStore.UpdateAsync(subject);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/Iam/Subjects");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Name")]
        public string? Name { get; set; }

        [Required]
        [Display(Name = "Email")]
        public string? Email { get; set; }

        // [Required]
        [Display(Name = "Concurrency stamp")]
        public string? ConcurrencyStamp { get; set; }
    }
}
