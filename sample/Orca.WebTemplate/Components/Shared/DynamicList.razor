@using System.ComponentModel

<div class="input-group mb-3">
    <input type="text" class="form-control" @bind="newItem" placeholder="Add new item" />
    <button type="button" class="btn btn-primary" @onclick="AddItem" aria-label="Add">
        <i class="fa fa-plus"></i>
    </button>
</div>
<ul class="list-group">
    @foreach (var item in Items)
    {
        <li class="list-group-item d-flex justify-content-between align-items-center">
            <span>@item</span>
            <div class="btn-group">
                <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item)" aria-label="Remove">
                    <i class="fa fa-trash"></i>
                </button>
            </div>
        </li>
    }
</ul>

@code {
    private IList<string> items = [];
    private string newItem = default!;

    [Parameter]
    public IList<string> Items
    {
        get
        {
            return items;
        }
        set
        {
            items = value;
            NotifyPropertyChanged();
        }
    }

    [Parameter]
    public EventCallback<IList<string>> ItemsChanged { get; set; }

    private async Task AddItem()
    {
        if (!string.IsNullOrWhiteSpace(newItem))
        {
            items.Add(newItem);
            newItem = string.Empty;

            await NotifyItemsChanged();
        }
    }

    private async Task RemoveItem(string item)
    {
        items.Remove(item);
        await NotifyItemsChanged();
    }
    
    private async Task NotifyItemsChanged()
    {
        await ItemsChanged.InvokeAsync(items);
    }

    public event PropertyChangedEventHandler PropertyChanged = default!;

    private void NotifyPropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
